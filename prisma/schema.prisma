// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  passwordHash String
  email        String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  cart      Cart?
  orders    Order[]
  wishlist  Wishlist[]
  reviews   ProductReview[]
  addresses ShippingAddress[]
}

model Product {
  id          String   @id @default(uuid())
  name        String
  price       Float
  image       String?
  category    String?
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  cartItems  CartItem[]
  orderItems OrderItem[]
  wishlist   Wishlist[]
  reviews    ProductReview[]
}

model Category {
  id          String  @id @default(uuid())
  name        String  @unique
  description String?
}

model Cart {
  id        String   @id @default(uuid())
  userId    String   @unique
  total     Float    @default(0.00)
  createdAt DateTime @default(now())

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id        String   @id @default(uuid())
  userId    String
  date      DateTime @default(now())
  status    String
  total     Float
  createdAt DateTime @default(now())

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    OrderItem[]
  payments PaymentDetails[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int      @default(1)
  price     Float
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

model PaymentDetails {
  id        String   @id @default(uuid())
  orderId   String
  amount    Float
  provider  String
  status    String
  createdAt DateTime @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(uuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
}

model ProductReview {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  review    String?
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ShippingAddress {
  id          String   @id @default(uuid())
  userId      String
  addressLine String
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
